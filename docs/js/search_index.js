var search_data = {"index":{"searchIndex":["createloggableactivities","createloggableactivitytables","loggableactivity","activitiescontroller","activitieshelper","activity","applicationcontroller","applicationhelper","applicationjob","applicationmailer","applicationrecord","configuration","configurationerror","currentactor","dataowner","encryption","encryptionerror","encryptionkey","engine","error","generators","installgenerator","hooks","payload","sanitizer","services","basepayloadsbuilder","custompayloadsbuilder","destroypayloadsbuilder","payloadsbuilder","updatepayloadsbuilder","object","action_key()","activities_for_actor()","activity_action()","actor_deleted?()","actor_display_name()","actor_secret_key()","actor_secret_key()","attrs()","attrs()","base_action()","blank?()","build()","build()","build()","build()","build_belongs_to_destroy_payload()","build_belongs_to_payload()","build_belongs_to_update_payload()","build_custom_payload()","build_custom_payloads()","build_destroy_payload()","build_encrypted_destroy_payload()","build_encrypted_payload()","build_encrypted_update_payload()","build_has_many_create_payload()","build_has_many_destroy_payloads()","build_has_many_payloads()","build_has_many_update_payload()","build_has_many_update_payloads()","build_has_one_destroy_payload()","build_has_one_payload()","build_has_one_update_payload()","build_payload()","build_payloads()","build_primary_destroy_payload()","build_primary_payload()","build_primary_update_payload()","build_relation_destroy_payload()","build_relation_payload()","build_relation_update_payload()","build_relations_destroy_payloads()","build_relations_payloads()","build_relations_update_payloads()","build_update_payloads()","change()","change()","changes_to_save()","clear_current_actor()","config_data()","copy_initializer()","copy_locale()","copy_migration()","create_activity()","create_encryption_key()","decrypt()","decrypt_array()","decrypt_attr()","decrypt_data()","decrypt_hash()","decrypted_attrs()","decrypted_from_to_attr()","decrypted_update_attrs()","delete()","deleted?()","deleted?()","deleted_attrs()","disable_hooks!()","encrypt()","encrypt_attr()","encrypt_attributes()","encrypt_attrs()","encrypt_record_name_for_record()","encrypted_actor_name()","encrypted_record_name()","encrypted_update_attrs()","encryption_key_for_record()","encryption_key_for_record()","fetch_actor_name_from()","fetch_record_name_for_record()","for_class()","for_record()","for_record_by_type_and_id()","format_json_for_display()","hooks_enabled?()","index()","last()","latest()","load_schema()","log()","log_activity()","log_create_activity()","log_custom_activity()","log_destroy()","log_destroy_activity()","log_login()","log_logout()","log_sign_up()","log_update()","log_update_activity()","mark_as_deleted!()","mark_as_deleted!()","mark_encryption_keys_as_deleted()","migration_number()","must_have_at_least_one_payload()","new()","new()","new()","new()","nothing_to_log?()","ordered_payloads()","payload_route()","payloads_attrs()","primary_encryption_key()","primary_payload()","primary_route()","public_attributes()","random_key()","record_display_name()","record_display_name()","record_key()","restore!()","run()","saved_changes()","secret_key()","set_current_actor()","show()","updated_public_attrs()","validate_config_file()","changelog","cheat_sheet","code_of_conduct","getting-started","gemfile","gemfile.lock","mit-license","readme","rakefile","loggable_activity_manifest.js","application.js","activities.scss","application.scss","application.html.slim","_activities.html.slim","head","config","description","applypatch-msg.sample","commit-msg.sample","fsmonitor-watchman.sample","post-update.sample","pre-applypatch.sample","pre-commit.sample","pre-merge-commit.sample","pre-push.sample","pre-rebase.sample","pre-receive.sample","prepare-commit-msg.sample","push-to-checkout.sample","update.sample","exclude","config_schema.json","loggable_activity_tasks.rake"],"longSearchIndex":["createloggableactivities","createloggableactivitytables","loggableactivity","loggableactivity::activitiescontroller","loggableactivity::activitieshelper","loggableactivity::activity","loggableactivity::applicationcontroller","loggableactivity::applicationhelper","loggableactivity::applicationjob","loggableactivity::applicationmailer","loggableactivity::applicationrecord","loggableactivity::configuration","loggableactivity::configurationerror","loggableactivity::currentactor","loggableactivity::dataowner","loggableactivity::encryption","loggableactivity::encryptionerror","loggableactivity::encryptionkey","loggableactivity::engine","loggableactivity::error","loggableactivity::generators","loggableactivity::generators::installgenerator","loggableactivity::hooks","loggableactivity::payload","loggableactivity::sanitizer","loggableactivity::services","loggableactivity::services::basepayloadsbuilder","loggableactivity::services::custompayloadsbuilder","loggableactivity::services::destroypayloadsbuilder","loggableactivity::services::payloadsbuilder","loggableactivity::services::updatepayloadsbuilder","object","loggableactivity::hooks#action_key()","loggableactivity::activity::activities_for_actor()","loggableactivity::activitieshelper#activity_action()","loggableactivity::activity#actor_deleted?()","loggableactivity::activity#actor_display_name()","loggableactivity::activity#actor_secret_key()","loggableactivity::hooks#actor_secret_key()","loggableactivity::activity#attrs()","loggableactivity::payload#attrs()","loggableactivity::hooks#base_action()","loggableactivity::encryption::blank?()","loggableactivity::services::custompayloadsbuilder#build()","loggableactivity::services::destroypayloadsbuilder#build()","loggableactivity::services::payloadsbuilder#build()","loggableactivity::services::updatepayloadsbuilder#build()","loggableactivity::services::destroypayloadsbuilder#build_belongs_to_destroy_payload()","loggableactivity::services::payloadsbuilder#build_belongs_to_payload()","loggableactivity::services::updatepayloadsbuilder#build_belongs_to_update_payload()","loggableactivity::hooks#build_custom_payload()","loggableactivity::services::custompayloadsbuilder#build_custom_payloads()","loggableactivity::hooks#build_destroy_payload()","loggableactivity::services::destroypayloadsbuilder#build_encrypted_destroy_payload()","loggableactivity::services::basepayloadsbuilder#build_encrypted_payload()","loggableactivity::services::updatepayloadsbuilder#build_encrypted_update_payload()","loggableactivity::services::updatepayloadsbuilder#build_has_many_create_payload()","loggableactivity::services::destroypayloadsbuilder#build_has_many_destroy_payloads()","loggableactivity::services::payloadsbuilder#build_has_many_payloads()","loggableactivity::services::updatepayloadsbuilder#build_has_many_update_payload()","loggableactivity::services::updatepayloadsbuilder#build_has_many_update_payloads()","loggableactivity::services::destroypayloadsbuilder#build_has_one_destroy_payload()","loggableactivity::services::payloadsbuilder#build_has_one_payload()","loggableactivity::services::updatepayloadsbuilder#build_has_one_update_payload()","loggableactivity::services::basepayloadsbuilder#build_payload()","loggableactivity::hooks#build_payloads()","loggableactivity::services::destroypayloadsbuilder#build_primary_destroy_payload()","loggableactivity::services::payloadsbuilder#build_primary_payload()","loggableactivity::services::updatepayloadsbuilder#build_primary_update_payload()","loggableactivity::services::destroypayloadsbuilder#build_relation_destroy_payload()","loggableactivity::services::payloadsbuilder#build_relation_payload()","loggableactivity::services::updatepayloadsbuilder#build_relation_update_payload()","loggableactivity::services::destroypayloadsbuilder#build_relations_destroy_payloads()","loggableactivity::services::payloadsbuilder#build_relations_payloads()","loggableactivity::services::updatepayloadsbuilder#build_relations_update_payloads()","loggableactivity::hooks#build_update_payloads()","createloggableactivities#change()","createloggableactivitytables#change()","loggableactivity::services::basepayloadsbuilder#changes_to_save()","loggableactivity::currentactor#clear_current_actor()","loggableactivity::configuration::config_data()","loggableactivity::generators::installgenerator#copy_initializer()","loggableactivity::generators::installgenerator#copy_locale()","loggableactivity::generators::installgenerator#copy_migration()","loggableactivity::hooks#create_activity()","loggableactivity::encryptionkey::create_encryption_key()","loggableactivity::encryption::decrypt()","loggableactivity::encryption::decrypt_array()","loggableactivity::payload#decrypt_attr()","loggableactivity::encryption::decrypt_data()","loggableactivity::encryption::decrypt_hash()","loggableactivity::payload#decrypted_attrs()","loggableactivity::payload#decrypted_from_to_attr()","loggableactivity::payload#decrypted_update_attrs()","loggableactivity::encryptionkey#delete()","loggableactivity::encryptionkey#deleted?()","loggableactivity::payload#deleted?()","loggableactivity::payload#deleted_attrs()","loggableactivity::hooks#disable_hooks!()","loggableactivity::encryption::encrypt()","loggableactivity::services::basepayloadsbuilder#encrypt_attr()","loggableactivity::services::basepayloadsbuilder#encrypt_attributes()","loggableactivity::services::basepayloadsbuilder#encrypt_attrs()","loggableactivity::services::basepayloadsbuilder#encrypt_record_name_for_record()","loggableactivity::hooks#encrypted_actor_name()","loggableactivity::services::custompayloadsbuilder#encrypted_record_name()","loggableactivity::services::updatepayloadsbuilder#encrypted_update_attrs()","loggableactivity::hooks#encryption_key_for_record()","loggableactivity::services::basepayloadsbuilder#encryption_key_for_record()","loggableactivity::hooks#fetch_actor_name_from()","loggableactivity::services::basepayloadsbuilder#fetch_record_name_for_record()","loggableactivity::configuration::for_class()","loggableactivity::encryptionkey::for_record()","loggableactivity::encryptionkey::for_record_by_type_and_id()","loggableactivity::activitieshelper#format_json_for_display()","loggableactivity::hooks#hooks_enabled?()","loggableactivity::activitiescontroller#index()","loggableactivity::activity::last()","loggableactivity::activity::latest()","loggableactivity::configuration::load_schema()","loggableactivity::hooks#log()","loggableactivity::hooks#log_activity()","loggableactivity::hooks#log_create_activity()","loggableactivity::hooks#log_custom_activity()","loggableactivity::hooks#log_destroy()","loggableactivity::hooks#log_destroy_activity()","loggableactivity::hooks#log_login()","loggableactivity::hooks#log_logout()","loggableactivity::hooks#log_sign_up()","loggableactivity::hooks#log_update()","loggableactivity::hooks#log_update_activity()","loggableactivity::dataowner#mark_as_deleted!()","loggableactivity::encryptionkey#mark_as_deleted!()","loggableactivity::hooks#mark_encryption_keys_as_deleted()","loggableactivity::generators::installgenerator#migration_number()","loggableactivity::activity#must_have_at_least_one_payload()","loggableactivity::configurationerror::new()","loggableactivity::encryptionerror::new()","loggableactivity::error::new()","loggableactivity::services::basepayloadsbuilder::new()","loggableactivity::hooks#nothing_to_log?()","loggableactivity::activity#ordered_payloads()","loggableactivity::payload#payload_route()","loggableactivity::activity#payloads_attrs()","loggableactivity::hooks#primary_encryption_key()","loggableactivity::activity#primary_payload()","loggableactivity::activity#primary_route()","loggableactivity::services::basepayloadsbuilder#public_attributes()","loggableactivity::encryptionkey::random_key()","loggableactivity::activity#record_display_name()","loggableactivity::payload#record_display_name()","loggableactivity::activity#record_key()","loggableactivity::encryptionkey#restore!()","loggableactivity::sanitizer::run()","loggableactivity::services::basepayloadsbuilder#saved_changes()","loggableactivity::payload#secret_key()","loggableactivity::currentactor#set_current_actor()","loggableactivity::activitiescontroller#show()","loggableactivity::services::updatepayloadsbuilder#updated_public_attrs()","loggableactivity::configuration::validate_config_file()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["CreateLoggableActivities","","CreateLoggableActivities.html","","<p>This migration creates the necessary tables for LoggableActivity.\n"],["CreateLoggableActivityTables","","CreateLoggableActivityTables.html","",""],["LoggableActivity","","LoggableActivity.html","","<p>This module provides generators for installing and configuring LoggableActivity. It includes generators …\n"],["LoggableActivity::ActivitiesController","","LoggableActivity/ActivitiesController.html","","<p>Controller for activities\n"],["LoggableActivity::ActivitiesHelper","","LoggableActivity/ActivitiesHelper.html","","<p>Helper methods for activities\n"],["LoggableActivity::Activity","","LoggableActivity/Activity.html","","<p>Represents one action in the activity log.\n"],["LoggableActivity::ApplicationController","","LoggableActivity/ApplicationController.html","",""],["LoggableActivity::ApplicationHelper","","LoggableActivity/ApplicationHelper.html","",""],["LoggableActivity::ApplicationJob","","LoggableActivity/ApplicationJob.html","",""],["LoggableActivity::ApplicationMailer","","LoggableActivity/ApplicationMailer.html","",""],["LoggableActivity::ApplicationRecord","","LoggableActivity/ApplicationRecord.html","",""],["LoggableActivity::Configuration","","LoggableActivity/Configuration.html","","<p>This class is used to load the configuration file located at config/loggable_activity.yml When the LoggableActivity::Hook …\n"],["LoggableActivity::ConfigurationError","","LoggableActivity/ConfigurationError.html","","<p>This class is used to load the configuration file located at config/loggable_activity.yml\n"],["LoggableActivity::CurrentActor","","LoggableActivity/CurrentActor.html","","<p>Stores current user in a thread variable so is can be accessed from the LoggableActivity::Hook model …\n"],["LoggableActivity::DataOwner","","LoggableActivity/DataOwner.html","","<p>This class represends an additional data owner for a record. For it to kick in, the data_owner configuration …\n"],["LoggableActivity::Encryption","","LoggableActivity/Encryption.html","","<p>This module is used to encrypt and decrypt attributes\n"],["LoggableActivity::EncryptionError","","LoggableActivity/EncryptionError.html","","<p>Error class for encryption.\n"],["LoggableActivity::EncryptionKey","","LoggableActivity/EncryptionKey.html","","<p>This class represents the encryption key used to unlock the data for one payload. When deleted, only …\n"],["LoggableActivity::Engine","","LoggableActivity/Engine.html","","<p>Engine\n<p>This module defines the LoggableActivity engine for use within a Rails application. It leverages …\n"],["LoggableActivity::Error","","LoggableActivity/Error.html","","<p>Error class for loggable activity.\n"],["LoggableActivity::Generators","","LoggableActivity/Generators.html","",""],["LoggableActivity::Generators::InstallGenerator","","LoggableActivity/Generators/InstallGenerator.html","","<p>The InstallGenerator class is responsible for copying the necessary files to set up LoggableActivity …\n"],["LoggableActivity::Hooks","","LoggableActivity/Hooks.html","","<p>When included to a model, it provides the features for logging events regarding to the model. For this …\n"],["LoggableActivity::Payload","","LoggableActivity/Payload.html","","<p>This class represents a payload in the log, containing encrypted data of one record in the database. …\n"],["LoggableActivity::Sanitizer","","LoggableActivity/Sanitizer.html","","<p>This module is responsible for sanitizing activities. When an encryption keys deleted_at field is set, …\n"],["LoggableActivity::Services","","LoggableActivity/Services.html","","<p>Namespace for services\n"],["LoggableActivity::Services::BasePayloadsBuilder","","LoggableActivity/Services/BasePayloadsBuilder.html","","<p>This service class provides the base payloads builder for the loggable activity. Other service modules …\n"],["LoggableActivity::Services::CustomPayloadsBuilder","","LoggableActivity/Services/CustomPayloadsBuilder.html","","<p>This service class builds custom payloads.\n"],["LoggableActivity::Services::DestroyPayloadsBuilder","","LoggableActivity/Services/DestroyPayloadsBuilder.html","","<p>This class is responsible for building destroy payloads used in loggable activities.\n"],["LoggableActivity::Services::PayloadsBuilder","","LoggableActivity/Services/PayloadsBuilder.html","","<p>This class is responsible for building payloads used in loggable activities.\n"],["LoggableActivity::Services::UpdatePayloadsBuilder","","LoggableActivity/Services/UpdatePayloadsBuilder.html","","<p>This service class builds update payloads when an instance of a model is updated.\n"],["Object","","Object.html","",""],["action_key","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-action_key","()","<p>Returns the action key for the current action.\n"],["activities_for_actor","LoggableActivity::Activity","LoggableActivity/Activity.html#method-c-activities_for_actor","(actor, limit = 20, params = { offset: 0 })","<p>Returns a list of activities for a given actor.\n"],["activity_action","LoggableActivity::ActivitiesHelper","LoggableActivity/ActivitiesHelper.html#method-i-activity_action","(activity)",""],["actor_deleted?","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-actor_deleted-3F","()","<p>Check if the actor is deleted. If the actor is deleted, it will return true. This way we don’t rely …\n"],["actor_display_name","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-actor_display_name","()","<p>Returns the display name for a actor. what method to use if defined in ‘/config/loggable_activity.yaml’ …\n"],["actor_secret_key","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-actor_secret_key","()","<p>Returns the key for the actor.\n"],["actor_secret_key","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-actor_secret_key","()","<p>Returns the encryption key for the actor.\n"],["attrs","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-attrs","()","<p>Returns an array of hashes, each representing an activity’s attributes and its associated relations. …\n"],["attrs","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-attrs","()","<p>Returns the decrypted attrs.\n<p>@return [Hash] The decrypted attributes.\n<p>Example:\n"],["base_action","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-base_action","()","<p>Convert the model name and name space in to ‘base_action’.\n"],["blank?","LoggableActivity::Encryption","LoggableActivity/Encryption.html#method-c-blank-3F","(value)","<p>Checks if a value is blank\n"],["build","LoggableActivity::Services::CustomPayloadsBuilder","LoggableActivity/Services/CustomPayloadsBuilder.html#method-i-build","()","<p>Builds a custom payloads for a ::LoggableActivity::Activity.\n"],["build","LoggableActivity::Services::DestroyPayloadsBuilder","LoggableActivity/Services/DestroyPayloadsBuilder.html#method-i-build","()","<p>Build payloads for a ::LoggableActivity::Activity.\n\n<pre>Example:\n  build_payloads\n\nReturns:\n #&lt;::LoggableActivity::Payload:0x0000000109658718&gt; ...</pre>\n"],["build","LoggableActivity::Services::PayloadsBuilder","LoggableActivity/Services/PayloadsBuilder.html#method-i-build","()","<p>Builds payloads for the loggable activity and returns an array of payload objects.\n<p>Example call: payloads …\n"],["build","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build","()","<p>Builds payloads for a ::LoggableActivity::Activity.\n"],["build_belongs_to_destroy_payload","LoggableActivity::Services::DestroyPayloadsBuilder","LoggableActivity/Services/DestroyPayloadsBuilder.html#method-i-build_belongs_to_destroy_payload","(relation_config)",""],["build_belongs_to_payload","LoggableActivity::Services::PayloadsBuilder","LoggableActivity/Services/PayloadsBuilder.html#method-i-build_belongs_to_payload","(relation_config)","<p>Builds the payload for a belongs_to relation.\n"],["build_belongs_to_update_payload","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build_belongs_to_update_payload","(relation_config)","<p>Builds the update payload for a belongs_to relation.\n"],["build_custom_payload","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-build_custom_payload","()",""],["build_custom_payloads","LoggableActivity::Services::CustomPayloadsBuilder","LoggableActivity/Services/CustomPayloadsBuilder.html#method-i-build_custom_payloads","(params)",""],["build_destroy_payload","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-build_destroy_payload","()","<p>Builds destroy payloads for the current action.\n"],["build_encrypted_destroy_payload","LoggableActivity::Services::DestroyPayloadsBuilder","LoggableActivity/Services/DestroyPayloadsBuilder.html#method-i-build_encrypted_destroy_payload","(record, related_to_activity_as)",""],["build_encrypted_payload","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-build_encrypted_payload","(record, options = {})","<p>Build a encrypted payload for a record\n"],["build_encrypted_update_payload","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build_encrypted_update_payload","(record, current_values, previous_values, public_attrs, options = {})","<p>Builds the encrypted update payload for a record.\n"],["build_has_many_create_payload","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build_has_many_create_payload","(relation_config, record)",""],["build_has_many_destroy_payloads","LoggableActivity::Services::DestroyPayloadsBuilder","LoggableActivity/Services/DestroyPayloadsBuilder.html#method-i-build_has_many_destroy_payloads","(relation_config)",""],["build_has_many_payloads","LoggableActivity::Services::PayloadsBuilder","LoggableActivity/Services/PayloadsBuilder.html#method-i-build_has_many_payloads","(relation_config)","<p>Builds payloads for has_many relations.\n"],["build_has_many_update_payload","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build_has_many_update_payload","(relation_config, record)",""],["build_has_many_update_payloads","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build_has_many_update_payloads","(relation_config)","<p>Builds payloads for has_many relations.\n"],["build_has_one_destroy_payload","LoggableActivity::Services::DestroyPayloadsBuilder","LoggableActivity/Services/DestroyPayloadsBuilder.html#method-i-build_has_one_destroy_payload","(relation_config)",""],["build_has_one_payload","LoggableActivity::Services::PayloadsBuilder","LoggableActivity/Services/PayloadsBuilder.html#method-i-build_has_one_payload","(relation_config)","<p>Builds the payload for a has_one relation.\n"],["build_has_one_update_payload","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build_has_one_update_payload","(relation_config)","<p>Builds the update payload for a has_one relation.\n"],["build_payload","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-build_payload","(record, encryption_key, encrypted_attrs, public_attrs, options = {})","<p>Builds the payload for a record\n"],["build_payloads","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-build_payloads","()","<p>Builds payloads for the current action.\n"],["build_primary_destroy_payload","LoggableActivity::Services::DestroyPayloadsBuilder","LoggableActivity/Services/DestroyPayloadsBuilder.html#method-i-build_primary_destroy_payload","()",""],["build_primary_payload","LoggableActivity::Services::PayloadsBuilder","LoggableActivity/Services/PayloadsBuilder.html#method-i-build_primary_payload","()","<p>Builds the primary payload.\n"],["build_primary_update_payload","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build_primary_update_payload","()","<p>Builds the primary payload.\n"],["build_relation_destroy_payload","LoggableActivity::Services::DestroyPayloadsBuilder","LoggableActivity/Services/DestroyPayloadsBuilder.html#method-i-build_relation_destroy_payload","(relation_config)",""],["build_relation_payload","LoggableActivity::Services::PayloadsBuilder","LoggableActivity/Services/PayloadsBuilder.html#method-i-build_relation_payload","(relation_config)","<p>Builds payloads for relations definded in the configuration.\n<p>@param relation_config [Hash] The configuration …\n"],["build_relation_update_payload","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build_relation_update_payload","(relation_config)",""],["build_relations_destroy_payloads","LoggableActivity::Services::DestroyPayloadsBuilder","LoggableActivity/Services/DestroyPayloadsBuilder.html#method-i-build_relations_destroy_payloads","()",""],["build_relations_payloads","LoggableActivity::Services::PayloadsBuilder","LoggableActivity/Services/PayloadsBuilder.html#method-i-build_relations_payloads","()","<p>Builds the relations payloads.\n"],["build_relations_update_payloads","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-build_relations_update_payloads","()","<p>Build the payloads for the relations of the record. only relations included in the configuration, will …\n"],["build_update_payloads","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-build_update_payloads","()","<p>Builds update payloads for the current action.\n"],["change","CreateLoggableActivities","CreateLoggableActivities.html#method-i-change","()",""],["change","CreateLoggableActivityTables","CreateLoggableActivityTables.html#method-i-change","()",""],["changes_to_save","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-changes_to_save","(record)","<p>Fetch the previous and current values for a record.\n"],["clear_current_actor","LoggableActivity::CurrentActor","LoggableActivity/CurrentActor.html#method-i-clear_current_actor","()",""],["config_data","LoggableActivity::Configuration","LoggableActivity/Configuration.html#method-c-config_data","()","<p>Loads the configuration file, and store it as a hash\n"],["copy_initializer","LoggableActivity::Generators::InstallGenerator","LoggableActivity/Generators/InstallGenerator.html#method-i-copy_initializer","()",""],["copy_locale","LoggableActivity::Generators::InstallGenerator","LoggableActivity/Generators/InstallGenerator.html#method-i-copy_locale","()",""],["copy_migration","LoggableActivity::Generators::InstallGenerator","LoggableActivity/Generators/InstallGenerator.html#method-i-copy_migration","()",""],["create_activity","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-create_activity","(payloads)","<p>Creates an activity with the specified payloads.\n"],["create_encryption_key","LoggableActivity::EncryptionKey","LoggableActivity/EncryptionKey.html#method-c-create_encryption_key","(record_type, record_id)","<p>Creates an encryption key for a record, optionally using a parent key.\n\n<pre>@param record_type [String] The ...</pre>\n"],["decrypt","LoggableActivity::Encryption","LoggableActivity/Encryption.html#method-c-decrypt","(data, secret_key)","<p>Decrypts the given data using the given encryption key\n<p>Example:\n\n<pre>::LoggableActivity::Encryption.decrypt(&#39;SOME_ENCRYPTED_DATA&#39;, ...</pre>\n"],["decrypt_array","LoggableActivity::Encryption","LoggableActivity/Encryption.html#method-c-decrypt_array","(data, secret_key)","<p>Decrypts an array’s values using the given encryption key\n"],["decrypt_attr","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-decrypt_attr","(value)","<p>Decrypts a single attribute.\n<p>@param value [String] The encrypted value to decrypt. @return [String] The …\n"],["decrypt_data","LoggableActivity::Encryption","LoggableActivity/Encryption.html#method-c-decrypt_data","(data, secret_key)","<p>Decrypts individual data using the given encryption key\n"],["decrypt_hash","LoggableActivity::Encryption","LoggableActivity/Encryption.html#method-c-decrypt_hash","(data, secret_key)","<p>Decrypts a hash’s values using the given encryption key\n"],["decrypted_attrs","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-decrypted_attrs","()","<p>Decrypts all attributes.\n<p>@return [Hash] The decrypted attributes.\n"],["decrypted_from_to_attr","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-decrypted_from_to_attr","(change)","<p>Decrypts ‘from’ and ‘to’ attributes.\n<p>@param change [Hash] The change hash containing ‘from’ …\n"],["decrypted_update_attrs","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-decrypted_update_attrs","()","<p>Decrypts the ‘from’ and ‘to’ attributes in the update payload.\n<p>@return [Array&lt;Hash&gt;] …\n"],["delete","LoggableActivity::EncryptionKey","LoggableActivity/EncryptionKey.html#method-i-delete","()","<p>Delete the encryption key by updating the key to nil. Nullify the delete_at field, so the key is not …\n"],["deleted?","LoggableActivity::EncryptionKey","LoggableActivity/EncryptionKey.html#method-i-deleted-3F","()","<p>check if the encryption key is deleted or it is about to be deleted\n"],["deleted?","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-deleted-3F","()","<p>Check if the record has been deleted.\n<p>@return [Boolean] True if the record has been deleted.\n"],["deleted_attrs","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-deleted_attrs","()","<p>Helper method to handle deleted attributes.\n<p>@return [Hash] The hash with deleted attributes.\n"],["disable_hooks!","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-disable_hooks-21","()",""],["encrypt","LoggableActivity::Encryption","LoggableActivity/Encryption.html#method-c-encrypt","(data, secret_key)","<p>Encrypts the given data using the given encryption key\n<p>Example:\n\n<pre>::LoggableActivity::Encryption.encrypt(&#39;my ...</pre>\n"],["encrypt_attr","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-encrypt_attr","(value, secret_key)","<p>Encrypt a single attribute.\n"],["encrypt_attributes","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-encrypt_attributes","(record, secret_key, options = {})","<p>Encrypts the attributes for the record.\n"],["encrypt_attrs","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-encrypt_attrs","(attrs, loggable_attrs, secret_key)","<p>Encrypt one attributes for only loggable_attrs, configured\n"],["encrypt_record_name_for_record","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-encrypt_record_name_for_record","(record, secret_key)","<p>Encrypts the record name for the record. If the record has a fetch_record_name_from the configuration, …\n"],["encrypted_actor_name","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-encrypted_actor_name","()","<p>Returns the encrypted name of the actor.\n"],["encrypted_record_name","LoggableActivity::Services::CustomPayloadsBuilder","LoggableActivity/Services/CustomPayloadsBuilder.html#method-i-encrypted_record_name","()",""],["encrypted_update_attrs","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-encrypted_update_attrs","(current_values, previous_values, encryption_key)","<p>Returns the encrypted attributes for the update payload.\n"],["encryption_key_for_record","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-encryption_key_for_record","(record = @record)","<p>Returns the encryption key for the record.\n"],["encryption_key_for_record","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-encryption_key_for_record","(record)","<p>Returns the encryption key for the record.\n"],["fetch_actor_name_from","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-fetch_actor_name_from","()","<p>Reads the field to feetch the record name from.\n"],["fetch_record_name_for_record","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-fetch_record_name_for_record","(record)","<p>Return the record name for the record. If the record has a fetch_record_name_from the configuration, …\n"],["for_class","LoggableActivity::Configuration","LoggableActivity/Configuration.html#method-c-for_class","(class_name)","<p>Returns the configuration data for the given class\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">LoggableActivity</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Configuration</span>.<span class=\"ruby-identifier\">for_class</span>(<span class=\"ruby-string\">&#39;User&#39;</span>)\n</pre>\n"],["for_record","LoggableActivity::EncryptionKey","LoggableActivity/EncryptionKey.html#method-c-for_record","(record)","<p>Returns an encryption key for a record, optionally using a parent key.\n\n<pre>@param record [ActiveRecord::Base] ...</pre>\n"],["for_record_by_type_and_id","LoggableActivity::EncryptionKey","LoggableActivity/EncryptionKey.html#method-c-for_record_by_type_and_id","(record_type, record_id)","<p>Returns an encryption key for a record by its type and ID, optionally using a parent key.\n\n<pre>@param record_type ...</pre>\n"],["format_json_for_display","LoggableActivity::ActivitiesHelper","LoggableActivity/ActivitiesHelper.html#method-i-format_json_for_display","(hash_data)",""],["hooks_enabled?","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-hooks_enabled-3F","()","<p>Hooks can disabled when a model is created or updated by a parrent model.\n"],["index","LoggableActivity::ActivitiesController","LoggableActivity/ActivitiesController.html#method-i-index","()",""],["last","LoggableActivity::Activity","LoggableActivity/Activity.html#method-c-last","(limit = 1)","<p>Returns the last activity. This is done to support of UUID primary keys.\n"],["latest","LoggableActivity::Activity","LoggableActivity/Activity.html#method-c-latest","(limit = 20, params = { offset: 0 })","<p>Returns a list of activities ordered by creation date. This is done to support UUID primary keys.\n"],["load_schema","LoggableActivity::Configuration","LoggableActivity/Configuration.html#method-c-load_schema","()","<p>Loads the schema file for the configuration file\n"],["log","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log","(action, actor: nil, params: {})","<p>Logs an activity with the specified action, actor, and params.\n\n<pre>@param action [Symbol] The action to log ...</pre>\n"],["log_activity","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_activity","()","<p>Logs an activity for the current action.\n"],["log_create_activity","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_create_activity","()","<p>Logs a create activity automatically if configured.\n"],["log_custom_activity","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_custom_activity","()","<p>Logs a custom activity.\n"],["log_destroy","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_destroy","()","<p>Logs an activity for the destroy action.\n"],["log_destroy_activity","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_destroy_activity","()","<p>Logs a destroy activity automatically if configured.\n"],["log_login","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_login","()",""],["log_logout","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_logout","()",""],["log_sign_up","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_sign_up","()",""],["log_update","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_update","()","<p>Logs an activity for the update action.\n"],["log_update_activity","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-log_update_activity","()","<p>Logs an update activity automatically if configured.\n"],["mark_as_deleted!","LoggableActivity::DataOwner","LoggableActivity/DataOwner.html#method-i-mark_as_deleted-21","()","<p>When a record is deleted, all data owner added to the record is also deleted.\n"],["mark_as_deleted!","LoggableActivity::EncryptionKey","LoggableActivity/EncryptionKey.html#method-i-mark_as_deleted-21","()","<p>Prepare the record for deletion\n"],["mark_encryption_keys_as_deleted","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-mark_encryption_keys_as_deleted","()","<p>Fullfill the needs of the data owners. Mostly this will be performend a few one, from 1 to 5. Enumeration …\n"],["migration_number","LoggableActivity::Generators::InstallGenerator","LoggableActivity/Generators/InstallGenerator.html#method-i-migration_number","()","<p>Generates a timestamp to use in the migration filename.\n<p>@return [String] the current UTC time formatted …\n"],["must_have_at_least_one_payload","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-must_have_at_least_one_payload","()","<p>Validates that the activity has at least one payload.\n"],["new","LoggableActivity::ConfigurationError","LoggableActivity/ConfigurationError.html#method-c-new","(msg = '')",""],["new","LoggableActivity::EncryptionError","LoggableActivity/EncryptionError.html#method-c-new","(msg = '')",""],["new","LoggableActivity::Error","LoggableActivity/Error.html#method-c-new","(msg = '')",""],["new","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-c-new","(record, payloads, params = {})","<p>Initializes the PayloadsBuilder with a record and an initial collection of payloads,\n"],["nothing_to_log?","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-nothing_to_log-3F","(_payloads)","<p>Returns true if there are no payloads to log.\n"],["ordered_payloads","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-ordered_payloads","()","<p>Returns payloads sorted by :related_to_activity_as.\n"],["payload_route","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-payload_route","()","<p>Returns the route for the payload unless the encryption_key is deleted.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payload</span>.<span class=\"ruby-identifier\">payload_route</span>\n</pre>\n"],["payloads_attrs","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-payloads_attrs","()",""],["primary_encryption_key","LoggableActivity::Hooks","LoggableActivity/Hooks.html#method-i-primary_encryption_key","()","<p>Returns the primary encryption key for the activity\n"],["primary_payload","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-primary_payload","()","<p>Returns the primary payload associated with the activity.\n<p>Example usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payload</span> = <span class=\"ruby-ivar\">@activity</span>.<span class=\"ruby-identifier\">primary_payload</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["primary_route","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-primary_route","()","<p>Returns the path for the activity.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@activity</span>.<span class=\"ruby-identifier\">path</span>\n</pre>\n"],["public_attributes","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-public_attributes","(record)",""],["random_key","LoggableActivity::EncryptionKey","LoggableActivity/EncryptionKey.html#method-c-random_key","()","<p>Generates a random encryption key.\n\n<pre>@return [String] The generated encryption key.</pre>\n<p>Example:\n"],["record_display_name","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-record_display_name","()","<p>Returns the display name for a record. what method to use if defined in ‘/config/loggable_activity.yaml’ …\n"],["record_display_name","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-record_display_name","()","<p>Returns the display name for the record.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payload</span>.<span class=\"ruby-identifier\">record_display_name</span>\n</pre>\n"],["record_key","LoggableActivity::Activity","LoggableActivity/Activity.html#method-i-record_key","()","<p>Returns the key for the logged record.\n"],["restore!","LoggableActivity::EncryptionKey","LoggableActivity/EncryptionKey.html#method-i-restore-21","()","<p>Restores the encryption key by updating the delete_at field to nil.\n"],["run","LoggableActivity::Sanitizer","LoggableActivity/Sanitizer.html#method-c-run","()",""],["saved_changes","LoggableActivity::Services::BasePayloadsBuilder","LoggableActivity/Services/BasePayloadsBuilder.html#method-i-saved_changes","(record)","<p>Returns saved changes for a record.\n"],["secret_key","LoggableActivity::Payload","LoggableActivity/Payload.html#method-i-secret_key","()","<p>Retrieves the encryption key for the payload.\n<p>@return [String, nil] The encryption key.\n"],["set_current_actor","LoggableActivity::CurrentActor","LoggableActivity/CurrentActor.html#method-i-set_current_actor","()",""],["show","LoggableActivity::ActivitiesController","LoggableActivity/ActivitiesController.html#method-i-show","()",""],["updated_public_attrs","LoggableActivity::Services::UpdatePayloadsBuilder","LoggableActivity/Services/UpdatePayloadsBuilder.html#method-i-updated_public_attrs","(current_values, previous_values)",""],["validate_config_file","LoggableActivity::Configuration","LoggableActivity/Configuration.html#method-c-validate_config_file","()","<p>Validates the configuration file againss the schema\n"],["CHANGELOG","","CHANGELOG_md.html","","<p>[0.5.6] - 2024-07-18\n<p>Documentation updated\n<p>Generator updated\n"],["CHEAT_SHEET","","CHEAT_SHEET_md.html","","<p>Build gem on localhost\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">gem</span> <span class=\"ruby-identifier\">build</span> <span class=\"ruby-identifier\">loggable_activity</span>.<span class=\"ruby-identifier\">gemspec</span>\n</pre>\n<p>Release gem\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>We as members, contributors, and leaders pledge to make …\n"],["GETTING-STARTED","","GETTING-STARTED_md.html","","<p>Getting started\n<p>This document should you getting started with <code>LoggableActivity</code>\n<p>Prerequisite\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source ‘rubygems.org’ git_source(:github) { |repo| “github.com …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  loggable_activity (0.5.6)\n    activerecord (~&gt; 7.1.3)\n    json-schema (~&gt; 4.1, ...</pre>\n"],["MIT-LICENSE","","MIT-LICENSE.html","","<p>Copyright Max Groenlund\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of …\n"],["README","","README_md.html","","<p>Loggable Activity 🌟\n<p>Super easy to use activity log with views out of the box\n- Just add the gem and mount ...\n"],["Rakefile","","Rakefile.html","","<p># frozen_string_literal: true\n<p>require ‘bundler/setup’\n<p>APP_RAKEFILE = File.expand_path(‘test/dummy/Rakefile’, …\n"],["loggable_activity_manifest.js","","app/assets/config/loggable_activity_manifest_js.html","","<p>//= link_directory ../stylesheets/loggable_activity .css\n"],["application.js","","app/assets/javascripts/loggable_activity/application_js.html","",""],["activities.scss","","app/assets/stylesheets/loggable_activity/activities_scss.html","","<p>.activity {\n\n<pre>--bs-alert-bg: transparent;\n--bs-alert-padding-x: 1rem;\n--bs-alert-padding-y: 0.5rem;\n// --bs-alert-margin-bottom: ...</pre>\n"],["application.scss","","app/assets/stylesheets/loggable_activity/application_scss.html","","<p>/*\n\n<pre>* This is a manifest file that&#39;ll be compiled into application.css, which will include all the files ...</pre>\n"],["application.html.slim","","app/views/layouts/loggable_activity/application_html_slim.html","","<p>doctype html html\n\n<pre>head\n  title Loggable activity\n  = csrf_meta_tags\n  = csp_meta_tag\n  = stylesheet_link_tag ...</pre>\n"],["_activities.html.slim","","app/views/loggable_activity/activities/_activities_html_slim.html","","<p>.row\n\n<pre>.col-3 \n  b.text-secondary = t(&#39;loggable_activity.activity.action&#39;) \n.col-3 \n  b.text-secondary = ...</pre>\n"],["HEAD","","git-org/HEAD.html","","<p>ref: refs/heads/main\n"],["config","","git-org/config.html","","<p>core &mdash; repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true …\n\n"],["description","","git-org/description.html","","<p>Unnamed repository; edit this file ‘description’ to name the repository.\n"],["applypatch-msg.sample","","git-org/hooks/applypatch-msg_sample.html","","<p>#!/bin/sh # # An example hook script to check the commit log message taken by # applypatch from an e-mail …\n"],["commit-msg.sample","","git-org/hooks/commit-msg_sample.html","","<p>#!/bin/sh # # An example hook script to check the commit log message. # Called by “git commit” …\n"],["fsmonitor-watchman.sample","","git-org/hooks/fsmonitor-watchman_sample.html","","<p>#!/usr/bin/perl\n<p>use strict; use warnings; use IPC::Open2;\n<p># An example hook script to integrate Watchman …\n"],["post-update.sample","","git-org/hooks/post-update_sample.html","","<p>#!/bin/sh # # An example hook script to prepare a packed repository for use over # dumb transports. # …\n"],["pre-applypatch.sample","","git-org/hooks/pre-applypatch_sample.html","","<p>#!/bin/sh # # An example hook script to verify what is about to be committed # by applypatch from an …\n"],["pre-commit.sample","","git-org/hooks/pre-commit_sample.html","","<p>#!/bin/sh # # An example hook script to verify what is about to be committed. # Called by “git commit” …\n"],["pre-merge-commit.sample","","git-org/hooks/pre-merge-commit_sample.html","","<p>#!/bin/sh # # An example hook script to verify what is about to be committed. # Called by “git merge” …\n"],["pre-push.sample","","git-org/hooks/pre-push_sample.html","","<p>#!/bin/sh\n<p># An example hook script to verify what is about to be pushed.  Called by “git # push” …\n"],["pre-rebase.sample","","git-org/hooks/pre-rebase_sample.html","","<p>#!/bin/sh # # Copyright © 2006, 2008 Junio C Hamano # # The “pre-rebase” hook is run just …\n"],["pre-receive.sample","","git-org/hooks/pre-receive_sample.html","","<p>#!/bin/sh # # An example hook script to make use of push options. # The example simply echoes all push …\n"],["prepare-commit-msg.sample","","git-org/hooks/prepare-commit-msg_sample.html","","<p>#!/bin/sh # # An example hook script to prepare the commit log message. # Called by “git commit” …\n"],["push-to-checkout.sample","","git-org/hooks/push-to-checkout_sample.html","","<p>#!/bin/sh\n<p># An example hook script to update a checked-out tree on a git push. # # This hook is invoked …\n"],["update.sample","","git-org/hooks/update_sample.html","","<p>#!/bin/sh # # An example hook script to block unannotated tags from entering. # Called by “git receive-pack” …\n"],["exclude","","git-org/info/exclude.html","","<p># git ls-files –others –exclude-from=.git/info/exclude # Lines that start with ‘#’ are comments. …\n"],["config_schema.json","","lib/loggable_activity/config_schema_json.html","","<p>{\n\n<pre>&quot;$schema&quot;: &quot;http://json-schema.org/draft-06/schema#&quot;,\n&quot;type&quot;: &quot;object&quot;,\n&quot;patternProperties&quot;: {\n  &quot;^[A-Za-z0-9_:]+$&quot;: ...</pre>\n"],["loggable_activity_tasks.rake","","lib/tasks/loggable_activity_tasks_rake.html","","<p># frozen_string_literal: true\n<p># desc “Explaining what the task does” # task :loggable_activity …\n"]]}}